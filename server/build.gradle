version "1.0-SNAPSHOT"
group "com.acuerdo"

buildscript {
    ext {
        kotlinVersion = "1.2.41"
        springBootVersion = "2.0.5.RELEASE"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security:spring-security-messaging"
    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin"
    compile "io.jsonwebtoken:jjwt:0.9.0"
    compile "org.web3j:core:3.6.0"
    compile "io.springfox:springfox-swagger2:2.9.2"
    testCompile "junit:junit"
    integrationTestCompile "org.testcontainers:testcontainers:1.11.2"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets.main.java.srcDirs += "build/generated-sources"
sourceSets.main.resources.srcDirs += "build/generated-resources"

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task generateContracts(type: Exec) {
    workingDir "$projectDir"
    commandLine "sh", "./web3/generate.sh",
            "Channels.json",
            "testrpc",
            "${buildDir}/generated-resources/contracts",
            "${buildDir}/generated-sources"
}

compileKotlin.dependsOn generateContracts